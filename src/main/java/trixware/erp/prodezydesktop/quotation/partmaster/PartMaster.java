/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trixware.erp.prodezydesktop.quotation.partmaster;

import trixware.erp.prodezydesktop.Model.StaticValues;
import trixware.erp.prodezydesktop.Utilities.MyCustomFilter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.json.JSONArray;
import org.json.JSONObject;
import trixware.erp.prodezydesktop.quotation.AssemblyDR;
import trixware.erp.prodezydesktop.quotation.PartDetailsPanel;
import trixware.erp.prodezydesktop.web_services.WebAPITester;

/**
 *
 * @author Akshay
 */
public class PartMaster extends javax.swing.JPanel {
    private ArrayList<String[]> uploadData;
    /**
     * Creates new form PartMaster
     */
    public PartMaster() {
        initComponents();
        tableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTFPartNo = new javax.swing.JTextField();
        jTFPartNm = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTFSupplier = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTFCateg = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTFPrice = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jLabel1.setText("Part No");
        add(jLabel1);
        jLabel1.setBounds(170, 50, 60, 30);
        add(jTFPartNo);
        jTFPartNo.setBounds(230, 50, 160, 30);
        add(jTFPartNm);
        jTFPartNm.setBounds(500, 50, 160, 30);

        jLabel2.setText("<html>Part<br> Name</html>");
        add(jLabel2);
        jLabel2.setBounds(440, 50, 60, 30);
        add(jTFSupplier);
        jTFSupplier.setBounds(230, 90, 160, 30);

        jLabel3.setText("<html>Category<br></html>");
        add(jLabel3);
        jLabel3.setBounds(700, 50, 60, 30);
        add(jTFCateg);
        jTFCateg.setBounds(760, 50, 160, 30);

        jLabel4.setText("<html>Price<br>per pc</html>");
        add(jLabel4);
        jLabel4.setBounds(440, 90, 60, 30);

        jLabel5.setText("<html>Supplier<br>Name</html>");
        add(jLabel5);
        jLabel5.setBounds(170, 90, 60, 30);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(230, 150, 130, 30);

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(370, 150, 130, 30);

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(510, 150, 140, 30);

        jButton4.setText("Import Bom");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4);
        jButton4.setBounds(660, 150, 140, 30);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 210, 1070, 300);
        add(jTFPrice);
        jTFPrice.setBounds(500, 90, 160, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            loadImportData();
        } catch (Exception ex) {
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int index=jTable1.getSelectedRow();
        DefaultTableModel model = ( DefaultTableModel ) jTable1.getModel ();

        jTFPartNo.setText(model.getValueAt ( index , 0 ).toString ());        
        jTFPartNm.setText(model.getValueAt ( index , 1 ).toString ());
        jTFCateg.setText(model.getValueAt ( index , 2 ).toString ());
        jTFSupplier.setText(model.getValueAt ( index , 3 ).toString ());
        jTFPrice.setText(model.getValueAt ( index , 4 ).toString ());
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addDataIntoDB();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        addDataIntoDB();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int index=jTable1.getSelectedRow();
        String partId=purchasedPart.get(index).getPartid();
        String addEmpAPICall1 = "purchaseparts_delete?part_id=" + partId;
        String result1 = WebAPITester.prepareWebCall(addEmpAPICall1, StaticValues.getHeader(), "");
        tableData();
    }//GEN-LAST:event_jButton3ActionPerformed
    public void reset()
    {
        jTFPartNo.setText("");        
        jTFPartNm.setText("");
        jTFCateg.setText("");
        jTFSupplier.setText("");
        jTFPrice.setText("");
 
    }
 
    public void addDataIntoDB()
    {
        String itemNo = jTFPartNo.getText().trim();
        String itemName =jTFPartNm.getText().trim();
        String itemType =jTFCateg.getText().trim();
        String supplier = jTFSupplier.getText().trim();
        String price = jTFPrice.getText().trim();
        if(!itemNo.equals("")&&!itemName.equals("")&&!itemType.equals("")&&!supplier.equals("")&&!price.equals(""))
        {
            try {
                String addEmpAPICall = "";
                int totalRec;
                addEmpAPICall = "purchaseparts?part_no=" + URLEncoder.encode(itemNo, "UTF-8") + "&part_type=" + URLEncoder.encode(itemType, "UTF-8") + "&supplier=" + URLEncoder.encode(supplier, "UTF-8");
                String result2 = WebAPITester.prepareWebCall(addEmpAPICall, StaticValues.getHeader(), "");
                if (!result2.contains("not found")) {
                    HashMap<String, Object> map = new HashMap<String, Object>();
                    JSONObject jObject = new JSONObject(result2);
                    Iterator<?> keys = jObject.keys();
                    
                    while (keys.hasNext()) {
                        String key = (String) keys.next();
                        Object value = jObject.get(key);
                        map.put(key, value);
                    }
                    
                    JSONObject st = (JSONObject) map.get("data");
                    totalRec = Integer.parseInt(st.get("totalrecords").toString());
                    if (totalRec == 0) {
                        String addEmpAPICall1 = "purchaseparts_add?part_no=" + URLEncoder.encode(itemNo, "UTF-8") + "&part_type=" + URLEncoder.encode(itemType, "UTF-8") + "&supplier=" + URLEncoder.encode(supplier, "UTF-8") + "&part_name=" + URLEncoder.encode(itemName, "UTF-8") + "&price=" + URLEncoder.encode(price, "UTF-8");
                        String result1 = WebAPITester.prepareWebCall(addEmpAPICall1, StaticValues.getHeader(), "");
                    } else {
                        JSONArray records = st.getJSONArray("records");
                        
                        JSONObject emp = null;
                        String partId = "";
                        for (int i1 = 0; i1 < records.length(); i1++) {
                            emp = records.getJSONObject(i1);
                            partId = emp.get("part_id").toString();
                        }
                        
                        String addEmpAPICall1 = "purchaseparts_update?part_id=" + partId + "&part_no=" + URLEncoder.encode(itemNo, "UTF-8") + "&part_type=" + URLEncoder.encode(itemType, "UTF-8") + "&supplier=" + URLEncoder.encode(supplier, "UTF-8") + "&part_name=" + URLEncoder.encode(itemName, "UTF-8") + "&price=" + URLEncoder.encode(price, "UTF-8");
                        String result1 = WebAPITester.prepareWebCall(addEmpAPICall1, StaticValues.getHeader(), "");
                    }
                } else {
                    String addEmpAPICall1 = "purchaseparts_add?part_no=" + URLEncoder.encode(itemNo, "UTF-8") + "&part_type=" + URLEncoder.encode(itemType, "UTF-8") + "&supplier=" + URLEncoder.encode(supplier, "UTF-8") + "&part_name=" + URLEncoder.encode(itemName, "UTF-8") + "&price=" + URLEncoder.encode(price, "UTF-8");
                    String result1 = WebAPITester.prepareWebCall(addEmpAPICall1, StaticValues.getHeader(), "");
                }
            } catch (UnsupportedEncodingException ex) {
                JOptionPane.showMessageDialog(null, ex );
            }
        }else{
            JOptionPane.showMessageDialog(null, " Please Fill details ! " );
        }
        tableData();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFCateg;
    private javax.swing.JTextField jTFPartNm;
    private javax.swing.JTextField jTFPartNo;
    private javax.swing.JTextField jTFPrice;
    private javax.swing.JTextField jTFSupplier;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void loadImportData() throws Exception{
        uploadData = new ArrayList<String[]>();
        
        File selectedFile = null;

        JFileChooser fileChooser = new JFileChooser ();
        fileChooser.setFileFilter ( new MyCustomFilter ( "excel 97-2003" ) );
        fileChooser.setCurrentDirectory ( new File ( System.getProperty (
                "user.home" ) ) );
        int result = fileChooser.showOpenDialog ( this );
        if ( result == JFileChooser.APPROVE_OPTION ) {
            selectedFile = fileChooser.getSelectedFile ();
        }

        FileChannel inputChannel = null;
        FileChannel outputChannel = null;

        File dir = new File ( "dataupload\\" );
        dir.mkdirs ();

        
        try{
            inputChannel = new FileInputStream(selectedFile).getChannel();
            outputChannel = new FileOutputStream (new File( dir, selectedFile.getName() )).getChannel ();
          
            outputChannel.transferFrom( inputChannel, 0, inputChannel.size() );
        
            inputChannel.close();
            outputChannel.close();
        }catch(FileNotFoundException fnfe){
        }catch(IOException ioe){
        }

        try {

           FileInputStream fis;
            
            fis = new FileInputStream ( new File ( "dataupload\\" + selectedFile.getName () ) );

            HSSFWorkbook my_xls_workbook = new HSSFWorkbook ( fis );
            HSSFSheet my_worksheet = my_xls_workbook.getSheetAt ( 0 );

            Iterator<Row> rowIterator = my_worksheet.iterator ();

            while ( rowIterator.hasNext () ) {
                Row row = rowIterator.next ();
                
                String[] dataRow = new String[ 6 ] ;
                
                try {
                    dataRow[0] = row.getCell ( 0 ).getStringCellValue () ;
                } catch ( Exception e2 ) {
                    try {
                        dataRow[0] = row.getCell ( 0 ).getNumericCellValue ()+"" ;
                    } catch ( Exception e1 ) {
                    }
                }
                try {
                    dataRow[1] = row.getCell ( 1 ).getStringCellValue () ;
                } catch ( Exception e2 ) {
                    try {
                        dataRow[1] = row.getCell ( 1 ).getNumericCellValue ()+"" ;
                    } catch ( Exception e1 ) {
                    }
                }
                try {
                    dataRow[2] = row.getCell ( 2 ).getStringCellValue () ;
                } catch ( Exception e2 ) {
                    try {
                        dataRow[2] = row.getCell ( 2 ).getNumericCellValue ()+"" ;
                    } catch ( Exception e1 ) {
                    }
                }
                try {
                    dataRow[3] = row.getCell ( 3 ).getStringCellValue () ;
                } catch ( Exception e2 ) {
                    try {
                        dataRow[3] = row.getCell ( 3 ).getNumericCellValue ()+"" ;
                    } catch ( Exception e1 ) {
                    }
                }
                try {
                    dataRow[4] = row.getCell ( 4 ).getStringCellValue () ;
                } catch ( Exception e2 ) {
                    try {
                        dataRow[4] = row.getCell ( 4 ).getNumericCellValue ()+"" ;
                    } catch ( Exception e1 ) {
                    }
                }
                try {
                    dataRow[5] = row.getCell ( 5 ).getStringCellValue () ;
                } catch ( Exception e2 ) {
                    try {
                        dataRow[5] = row.getCell ( 5 ).getNumericCellValue ()+"" ;
                    } catch ( Exception e1 ) {
                    }
                }
                uploadData.add( dataRow );
            }
            fis.close ();
            
            for ( int i = 0 ; i < uploadData.size () ; i ++ ) {
                String[] element = uploadData.get(i) ;

                if(i!=0)
                {
                    if(element[0]!=null && element[2]!=null && element[3]!=null)
                    {
                        String e=element[0].replace(" ", "");
                        if(!e.equals(""))
                        {
                            String itemNo=element[0].trim();
                            String itemName=element[1].trim();
                            String itemType=element[2].trim();
                            String supplier=element[3].trim();
                            String price=element[4].trim();
                            String addEmpAPICall = "";
                            int totalRec;
                            addEmpAPICall = "purchaseparts?part_no="+URLEncoder.encode(itemNo,"UTF-8")+"&part_type="+URLEncoder.encode(itemType,"UTF-8")+"&supplier=" + URLEncoder.encode(supplier,"UTF-8");
                            String result2 = WebAPITester.prepareWebCall(addEmpAPICall, StaticValues.getHeader(), "");
                            System.err.println(result2);
                            if (!result2.contains("not found")) {
                                HashMap<String, Object> map = new HashMap<String, Object>();
                                JSONObject jObject = new JSONObject(result2);
                                Iterator<?> keys = jObject.keys();

                                while (keys.hasNext()) {
                                    String key = (String) keys.next();
                                    Object value = jObject.get(key);
                                    map.put(key, value);
                                }

                                JSONObject st = (JSONObject) map.get("data");
                                totalRec = Integer.parseInt(st.get("totalrecords").toString());
                                System.err.println(totalRec);
                                if(totalRec==0)
                                {
                                    String addEmpAPICall1 = "purchaseparts_add?part_no="+URLEncoder.encode(itemNo,"UTF-8")+"&part_type="+URLEncoder.encode(itemType,"UTF-8")+"&supplier=" + URLEncoder.encode(supplier,"UTF-8")+"&part_name=" + URLEncoder.encode(itemName,"UTF-8")+"&price=" + URLEncoder.encode(price,"UTF-8");
                                    String result1 = WebAPITester.prepareWebCall(addEmpAPICall1, StaticValues.getHeader(), "");
                                    System.err.println(result1);
                                }else{
                                    JSONArray records = st.getJSONArray("records");

                                    JSONObject emp = null;
                                    String partId="";
                                    for (int i1 = 0; i1 < records.length(); i1++) {
                                        emp = records.getJSONObject(i1);
                                        partId=emp.get("part_id").toString();
                                    }

                                    String addEmpAPICall1 = "purchaseparts_update?part_id="+partId+"&part_no="+URLEncoder.encode(itemNo,"UTF-8")+"&part_type="+URLEncoder.encode(itemType,"UTF-8")+"&supplier=" + URLEncoder.encode(supplier,"UTF-8")+"&part_name=" + URLEncoder.encode(itemName,"UTF-8")+"&price=" + URLEncoder.encode(price,"UTF-8");
                                    String result1 = WebAPITester.prepareWebCall(addEmpAPICall1, StaticValues.getHeader(), "");                                                                        
                                    System.err.println(result1);

                                }
                            }else{
                                String addEmpAPICall1 = "purchaseparts_add?part_no="+URLEncoder.encode(itemNo,"UTF-8")+"&part_type="+URLEncoder.encode(itemType,"UTF-8")+"&supplier=" + URLEncoder.encode(supplier,"UTF-8")+"&part_name=" + URLEncoder.encode(itemName,"UTF-8")+"&price=" + URLEncoder.encode(price,"UTF-8");
                                String result1 = WebAPITester.prepareWebCall(addEmpAPICall1, StaticValues.getHeader(), "");
                            }                            
                        }
                    }
                }
                tableData();
//                for(String e:element)
//                {
//                    if(i1!=0 && e!=null)
//                    {
//                        String ele=e.replace(" ", "");
//                        
//                        if(!ele.equals(""))
//                        {
//                           System.out.println(" "+e+" ");
//                           
//                        }
//                    }
//                    
//                    i1++;
//
//                }
//                p2 = new PartDetailsPanel( i+1 ,  element[0],element[1],element[2],element[3],element[4],element[5]  ,  processes,  measunit , rawmaterial   ) ;
//                
//                p2.setBounds (  50 , 0 , 1100, 60  ) ;
//                abc.add(p2);
//                parts.add( p2 );
                repaint() ;
            }
//            submit.setBounds(0, 0, 25, 10);
//            abc.add(submit);
//            revalidate();
//            repaint() ;
            
        }  catch ( IOException ex ) {
            System.out.println ( "IO  " + ex.getMessage () );
        }                     
    }
    private ArrayList<ParturchasedDr> purchasedPart=null; 
    Vector<Vector<String>> data = null;
    Vector<String> columnNames = null;
    Vector<String> columnNames2 = null;   
    public void tableData()
    {
        try {
            purchasedPart = new ArrayList<ParturchasedDr>();
            data = new Vector<Vector<String>>();
            columnNames = new Vector<String>();
            columnNames2 = new Vector<String>();

            columnNames.add("part_no");
            columnNames2.add("Part No");
            columnNames.add("part_name");
            columnNames2.add("Part Desc");
            columnNames.add("part_type");
            columnNames2.add("Type");
            columnNames.add("supplier");
            columnNames2.add("Supplier");
            columnNames.add("price");
            columnNames2.add("Rate");

            String addEmpAPICall = "purchaseparts";
            String result2 = WebAPITester.prepareWebCall(addEmpAPICall, StaticValues.getHeader(), "");

            if (result2 != null) {
                HashMap<String, Object> map2 = new HashMap<String, Object>();
                JSONObject jObject2 = new JSONObject(result2);
                Iterator<?> keys2 = jObject2.keys();

                while (keys2.hasNext()) {
                    String key = (String) keys2.next();
                    Object value = jObject2.get(key);
                    map2.put(key, value);
                }
                JSONObject st1 = (JSONObject) map2.get("data");

                JSONArray records1 = st1.getJSONArray("records");

                JSONObject assly = null;
                for (int i1 = 0; i1 < records1.length(); i1++) {
                    Vector<String> vector = new Vector<String>();
                    assly = records1.getJSONObject(i1);
                    String part_id = assly.get("part_id").toString();
                    String part_no = assly.get("part_no").toString();
                    String part_name = assly.get("part_name").toString();
                    String part_type = assly.get("part_type").toString();
                    String supplier = assly.get("supplier").toString();
                    String price = assly.get("price").toString();
                    purchasedPart.add(new ParturchasedDr(part_id, part_no, part_name, part_type, supplier, price));

                    vector.add(part_no);
                    vector.add(part_name);
                    vector.add(part_type);
                    vector.add(supplier);
                    vector.add(price);

                    data.add(vector);
                }
                jTable1.setModel(new DefaultTableModel(data, columnNames2));    
                TableModiFier.setTableSize(jTable1,30,100);
            }
        } catch (Exception e) {
        }
        reset();
    }
}
