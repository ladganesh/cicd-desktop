/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trixware.erp.prodezydesktop.Utilities;

import trixware.erp.prodezydesktop.Model.StaticValues;
import trixware.erp.prodezydesktop.Model.EmployeeDR;
import trixware.erp.prodezydesktop.Model.MachineDR;
import trixware.erp.prodezydesktop.Model.ProcessDR;
import trixware.erp.prodezydesktop.Model.ProductDR;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import javax.swing.JFileChooser;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author Rajesh
 */
public class ImportMasters extends javax.swing.JPanel {

    ArrayList<ProductDR> products = null;
    ArrayList<EmployeeDR> employees = null;
    ArrayList<ProcessDR> processes = null;
    ArrayList<MachineDR> machines = null;

    ProductDR prdr = null;
    EmployeeDR empdr = null;
    ProcessDR prcdr = null;
    MachineDR mcdr = null;

    /**
     * Creates new form ImportMasters
     */
    public ImportMasters () {
        initComponents ();
        loadComboBoxes ();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setLayout(null);

        jButton1.setText("Import Masters");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(290, 86, 140, 32);

        jButton2.setText("<html><center><marquee>Import Master Relationship</marquee></center></html>");
        add(jButton2);
        jButton2.setBounds(290, 130, 140, 40);

        jButton3.setText("Import Data");
        add(jButton3);
        jButton3.setBounds(290, 186, 140, 32);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
    

        JFileChooser fileChooser = new JFileChooser ();
        fileChooser.setFileFilter ( new MyCustomFilter ("excel 97-2003") );
        fileChooser.setCurrentDirectory ( new File ( System.getProperty (
                "user.home" ) ) );
        int result = fileChooser.showOpenDialog ( this );
        if ( result == JFileChooser.APPROVE_OPTION ) {

            selectedFile = fileChooser.getSelectedFile ();

        }

        FileChannel inputChannel = null;
        FileChannel outputChannel = null;

        File dir = new File ( "dataupload\\" );
        dir.mkdirs ();
        
        
        try { 
            inputChannel = new FileInputStream ( selectedFile ).getChannel (); 
        outputChannel = new FileOutputStream ( new File ( dir , selectedFile.getName () ) ).getChannel (); 
        outputChannel.transferFrom( inputChannel , 0 , inputChannel.size () );
         
         inputChannel.close (); 
         outputChannel.close ();
         
         fetchDataFromExcel () ;
         
          } catch ( FileNotFoundException e1 ) {
         
          } catch ( IOException e2 ) {
         
          }
        
    }//GEN-LAST:event_jButton1MouseClicked

    File selectedFile = null;

    // Identify master a.  Manually  b. Automatically
    public void fetchDataFromExcel_old () {

        String url;
        try {

            url = "jdbc:sqlite:" + StaticValues.dbName;
            Connection con = DriverManager.getConnection ( url );
            Statement stm = con.createStatement ();
            PreparedStatement pst;

            FileInputStream fis;
            //String query = "INSERT INTO xl_import_test ( ID, name, address, phone, email) VALUES ( ?,?,?,?,?)";
            String query = "INSERT INTO dailyreport3 (  rdate, rtdate,showrdate,showrtdate, "
                    + "shift_id,"
                    + "machineid,"
                    + "empid,"
                    + "fgid,"
                    + "processid,"
                    + "starttime,stoptime, showFromTime,showToTime,"
                    + "act_stp_min, actual_min, total_min, actual_hours,total_hours,"
                    + " qtyin, "
                    + "qtyout,"
                    + "rejection,"
                    + "batchno,"
                    + "rej_reason,"
                    + "customer_id ) VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?)";

            //      pst = con.prepareStatement ( query );
            fis = new FileInputStream ( new File ( "dataupload\\" + selectedFile.getName () ) );

            HSSFWorkbook my_xls_workbook = new HSSFWorkbook ( fis );
            HSSFSheet my_worksheet = my_xls_workbook.getSheetAt ( 0 );

            Iterator<Row> rowIterator = my_worksheet.iterator ();
            int newRow = 1;
            while ( rowIterator.hasNext () ) {
                Row row = rowIterator.next ();
                Iterator<Cell> cellIterator = row.cellIterator ();
                int newCell = 1;
                String rowCount = "Row " + newRow;
                while ( cellIterator.hasNext () ) {

                    /*
                     * 1. Date with different formats from first column into
                     * first four columns of database table dailyretport3 2.
                     *
                     *
                     *
                     */
                    Cell cell = cellIterator.next ();

                    /*
                     * switch(cell.getCellType ()){
                     *
                     * case 0: System.out.println ( rowCount+"Number" ); break ;
                     * case 1: System.out.println ( rowCount+"String" ); break ;
                     * case 2: System.out.println (rowCount+"Formula" ); break ;
                     * case 3: System.out.println (rowCount+ "Blank" ); break ;
                     * case 4: System.out.println ( rowCount+"Boolean" ); break;
                     * case 5: System.out.println ( rowCount+"Error" ); break ;
                     * }
                     */
                    if ( newCell == 8 || newCell == 9 ) {
                        try {

                            String date = sdf1.format ( cell.getDateCellValue () );
                            System.out.println ( rowCount + date );

                        } catch ( Exception e2 ) {

                        }
                    } else {

                        try {

                            String date = cell.getStringCellValue ();
                            System.out.println ( "String val  " + rowCount + date );

                        } catch ( Exception e ) {

                            try {

                                int date = ( int ) Math.round ( ( cell.getNumericCellValue () ) );
                                System.out.println ( "Numeric val  " + rowCount + date );

                            } catch ( Exception e1 ) {

                            }
                        }
                    }

                    newCell ++;
                }
                newRow ++;
            }

            fis.close ();
            //    pst.close ();

        } catch ( SQLException ex ) {
            System.out.println ( "SQL  " + ex.getMessage () );
        } catch ( IOException ex ) {
            System.out.println ( "IO  " + ex.getMessage () );
        }

    }

    public void fetchDataFromExcel () {

        ArrayList<String[]> values = new ArrayList<String[]> ();
        String[] valuesArr = null;
        String url;
        try {

            url = "jdbc:sqlite:" + StaticValues.dbName;
            Connection con = DriverManager.getConnection ( url );
            Statement stm = con.createStatement ();
            PreparedStatement pst;

            FileInputStream fis;
            String query = "INSERT INTO dailyreport3 (  rdate, rtdate,showrdate,showrtdate, "
                    + "shift_id,"
                    + "machineid,"
                    + "empid,"
                    + "fgid,"
                    + "processid,"
                    + "starttime,stoptime, showFromTime,showToTime,"
                    + "act_stp_min,  total_min, actual_min, actual_hours,total_hours,"
                    + " qtyin, "
                    + "qtyout,"
                    + "rejection,"
                    + "batchno,"
                    + "rej_reason,"
                    + "customer_id ) VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )";

            pst = con.prepareStatement ( query );
            fis = new FileInputStream ( new File ("dataupload\\" + selectedFile.getName () ) );

            HSSFWorkbook my_xls_workbook = new HSSFWorkbook ( fis );
            HSSFSheet my_worksheet = my_xls_workbook.getSheetAt ( 0 );

            Iterator<Row> rowIterator = my_worksheet.iterator ();

            while ( rowIterator.hasNext () ) {

                valuesArr = new String[ 24 ];
                Row row = rowIterator.next ();

                Cell cell = row.getCell ( 0 );

                try {

                    if ( cell.getCellType () != Cell.CELL_TYPE_BLANK ) {

                        int date, month;
                        try {

                            cell.setCellType ( Cell.CELL_TYPE_NUMERIC );
                            Cell cell2 = row.getCell ( 1 );
                            cell2.setCellType ( Cell.CELL_TYPE_NUMERIC );

                            date = ( int ) cell.getNumericCellValue ();
                            month = ( int ) cell2.getNumericCellValue ();

                            pst.setString ( 1 , getDate ( date , month ) );
                            pst.setString ( 2 , getDate ( date , month ) );
                            pst.setString ( 3 , getDate_2 ( date , month ) );
                            pst.setString ( 4 , getDate_2 ( date , month ) );

                            valuesArr[ 0 ] = String.valueOf ( getDate ( date , month ) );
                            valuesArr[ 1 ] = String.valueOf ( getDate ( date , month ) );
                            valuesArr[ 2 ] = String.valueOf ( getDate_2 ( date , month ) );
                            valuesArr[ 3 ] = String.valueOf ( getDate_2 ( date , month ) );

                        } catch ( Exception e2 ) {
                            try {

                                cell.setCellType ( Cell.CELL_TYPE_NUMERIC );
                                Cell cell2 = row.getCell ( 1 );
                                cell2.setCellType ( Cell.CELL_TYPE_NUMERIC );

                                date = Integer.parseInt ( cell.getStringCellValue () );
                                month = Integer.parseInt ( cell2.getStringCellValue () );

                                pst.setString ( 1 , getDate ( date , month ) );
                                pst.setString ( 2 , getDate ( date , month ) );
                                pst.setString ( 3 , getDate_2 ( date , month ) );
                                pst.setString ( 4 , getDate_2 ( date , month ) );

                                valuesArr[ 0 ] = String.valueOf ( getDate ( date , month ) );
                                valuesArr[ 1 ] = String.valueOf ( getDate ( date , month ) );
                                valuesArr[ 2 ] = String.valueOf ( getDate_2 ( date , month ) );
                                valuesArr[ 3 ] = String.valueOf ( getDate_2 ( date , month ) );
                            } catch ( Exception e3 ) {

                                System.out.println ( "Error " + e2.getMessage () );
                            }
                        }

                        try {
                            pst.setInt ( 5 , ( int ) Math.round ( row.getCell ( 2 ).getNumericCellValue () ) );
                            valuesArr[ 4 ] = String.valueOf ( ( int ) Math.round ( row.getCell ( 2 ).getNumericCellValue () ) );
                        } catch ( Exception e1 ) {
                            try {
                                pst.setString ( 5 , String.valueOf ( ( int ) Math.round ( row.getCell ( 2 ).getNumericCellValue () ) ) );
                                valuesArr[ 4 ] = String.valueOf ( ( int ) Math.round ( row.getCell ( 2 ).getNumericCellValue () ) );
                            } catch ( Exception e2 ) {
                            }
                        }

                        String machine = "";
                        try {
                            machine = String.valueOf ( ( int ) row.getCell ( 3 ).getNumericCellValue () );
                            valuesArr[ 5 ] = String.valueOf ( ( int ) row.getCell ( 3 ).getNumericCellValue () );
                        } catch ( Exception e1 ) {
                            try {
                                machine = String.valueOf ( ( int ) row.getCell ( 3 ).getNumericCellValue () );
                                valuesArr[ 5 ] = String.valueOf ( ( int ) row.getCell ( 3 ).getNumericCellValue () );
                            } catch ( Exception e2 ) {
                            }
                        }
                        for ( int i = 0 ; i < machines.size () ; i ++ ) {

                            if ( machines.get ( i ).MC_NAME.equals ( machine ) ) {
                                pst.setInt ( 6 , machines.get ( i ).MC_ID );
                                i = machines.size ();
                            }
                        }

                        String employee = "";
                        try {
                            employee = row.getCell ( 4 ).getStringCellValue ();
                        } catch ( Exception e2 ) {

                        }
                        valuesArr[ 6 ] = employee;
                        for ( int i = 0 ; i < employees.size () ; i ++ ) {
                            if ( employees.get ( i ).EMP_NAME.equals ( employee ) ) {
                                pst.setInt ( 7 , employees.get ( i ).EMP_ID );
                                i = employees.size ();
                            }
                        }

                        String product = "";
                        try {
                            product = row.getCell ( 5 ).getStringCellValue ();
                        } catch ( Exception e1 ) {
                            try {
                                product = String.valueOf ( ( long ) row.getCell ( 5 ).getNumericCellValue () );
                            } catch ( Exception e2 ) {
                                System.out.println ( "" + e2.getMessage () );
                            }
                        }
                        valuesArr[ 7 ] = product;
                        for ( int i = 0 ; i < products.size () ; i ++ ) {

                            if ( products.get ( i ).FG_PART_NO.equals ( product ) ) {
                                pst.setInt ( 8 , products.get ( i ).FG_ID );
                                i = products.size ();
                            }
                        }

                        String process = "";
                        try {
                            process = row.getCell ( 6 ).getStringCellValue ();
                        } catch ( Exception e3 ) {
                            try {
                                process = String.valueOf ( row.getCell ( 6 ).getNumericCellValue () );
                            } catch ( Exception e4 ) {

                            }
                        }
                        valuesArr[ 8 ] = process;
                        for ( int i = 0 ; i < processes.size () ; i ++ ) {

                            if ( processes.get ( i ).PRC_NAME.equals ( process ) ) {
                                pst.setInt ( 9 , processes.get ( i ).PRC_ID );
                                i = processes.size ();
                            }
                        }

                        try {
                            String time1, time2, time3, time4;

                            time1 = sdf1.format ( row.getCell ( 7 ).getDateCellValue () );
                            time2 = sdf1.format ( row.getCell ( 8 ).getDateCellValue () );
                            time3 = sdf1.format ( row.getCell ( 7 ).getDateCellValue () );
                            time4 = sdf1.format ( row.getCell ( 8 ).getDateCellValue () );

                            pst.setString ( 10 , time1 );
                            pst.setString ( 11 , time2 );
                            pst.setString ( 12 , time3 );
                            pst.setString ( 13 , time4 );

                            valuesArr[ 9 ] = time1;
                            valuesArr[ 10 ] = time2;
                            valuesArr[ 11 ] = time3;
                            valuesArr[ 12 ] = time4;
                        } catch ( Exception e1 ) {
                        }

                        int lossinmin = 0;
                        try {
                            lossinmin = ( int ) row.getCell ( 25 ).getNumericCellValue ();
                            pst.setInt ( 14 , lossinmin );
                        } catch ( Exception e1 ) {
                            try {
                                lossinmin = Integer.parseInt ( row.getCell ( 25 ).getStringCellValue () );
                                pst.setInt ( 14 , lossinmin );
                            } catch ( Exception e2 ) {
                            }
                        }
                        valuesArr[ 13 ] = String.valueOf ( lossinmin );

                        int totalTimeinMin = 0;
                        try {
                            totalTimeinMin = ( int ) row.getCell ( 10 ).getNumericCellValue ();
                        } catch ( Exception e1 ) {
                            try {
                                totalTimeinMin = Integer.parseInt ( row.getCell ( 10 ).getStringCellValue () );
                            } catch ( Exception e2 ) {
                            }
                        }
                        pst.setInt ( 15 , totalTimeinMin );
                        valuesArr[ 14 ] = String.valueOf ( totalTimeinMin );

                        pst.setInt ( 16 , ( totalTimeinMin - lossinmin ) );
                        valuesArr[ 15 ] = String.valueOf ( ( totalTimeinMin - lossinmin ) );

                        pst.setString ( 17 , ( ( totalTimeinMin - lossinmin ) / 60 ) + "." + ( ( totalTimeinMin - lossinmin ) / 60 ) );
                        valuesArr[ 16 ] = String.valueOf ( ( ( totalTimeinMin - lossinmin ) / 60 ) + "." + ( ( totalTimeinMin - lossinmin ) / 60 ) );

                        pst.setString ( 18 , ( ( totalTimeinMin ) / 60 ) + "." + ( ( totalTimeinMin ) / 60 ) );
                        valuesArr[ 17 ] = String.valueOf ( ( totalTimeinMin ) / 60 ) + "." + ( ( totalTimeinMin ) / 60 );

                        try {

                            int partsIn = ( int ) row.getCell ( 30 ).getNumericCellValue ();
                            pst.setInt ( 19 , partsIn );
                            pst.setInt ( 20 , partsIn );
                            valuesArr[ 18 ] = String.valueOf ( partsIn );
                            valuesArr[ 19 ] = String.valueOf ( partsIn );
                        } catch ( Exception e1 ) {
                            try {

                                int partsIn = Integer.parseInt ( row.getCell ( 30 ).getStringCellValue () );
                                pst.setInt ( 19 , partsIn );
                                pst.setInt ( 20 , partsIn );
                                valuesArr[ 18 ] = String.valueOf ( partsIn );
                                valuesArr[ 19 ] = String.valueOf ( partsIn );
                            } catch ( Exception e2 ) {
                            }
                        }

                        try {

                            int rejection = Integer.parseInt ( row.getCell ( 31 ).getStringCellValue () );

                            pst.setInt ( 21 , rejection );

                            valuesArr[ 20 ] = String.valueOf ( rejection );
                        } catch ( Exception e1 ) {
                            try {

                                int rejection = ( int ) row.getCell ( 31 ).getNumericCellValue ();
                                pst.setInt ( 21 , rejection );
                                valuesArr[ 20 ] = String.valueOf ( rejection );
                            } catch ( Exception e2 ) {

                            }
                        }

                        pst.setInt ( 22 , 0 );
                        pst.setInt ( 23 , 0 );
                        pst.setInt ( 24 , 0 );
                        valuesArr[ 21 ] = String.valueOf ( 0 );
                        valuesArr[ 22 ] = String.valueOf ( 0 );
                        valuesArr[ 23 ] = String.valueOf ( 0 );

                        values.add ( valuesArr );
                        pst.addBatch ();

                    }
                } catch ( Exception e5 ) {
                    System.out.println ( "Reached end of file" );
                }
            }

//            for ( int i = 0 ; i < values.size () ; i ++ ) {
//                String[] val = values.get ( i );
//                for ( int j = 0 ; j < valuesArr.length ; j ++ ) {
//                    System.out.println ( "" + val[ j ] );
//                }
//            }

            int[] totalRecords = new int[ 2 ];
            try {
                totalRecords = pst.executeBatch ();
            } catch ( BatchUpdateException e1 ) {
                totalRecords = e1.getUpdateCounts ();
            }
            System.out.println ( "Total record Inserted " + totalRecords.length );

            fis.close ();
            pst.close ();

        } catch ( SQLException ex ) {
            System.out.println ( "SQL  " + ex.getMessage () );
        } catch ( IOException ex ) {
            System.out.println ( "IO  " + ex.getMessage () );
        }

    }

    Calendar c1 = Calendar.getInstance ();
    SimpleDateFormat sdf3 = new SimpleDateFormat ( "yyyy-MM-dd" );
    SimpleDateFormat sdf2 = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss" );
    SimpleDateFormat sdf1 = new SimpleDateFormat ( "HH:mm" );

    public String getDate ( int date , int month ) {

        c1.set ( Calendar.DATE , date );

        switch ( month ) {

            case 1:
                c1.set ( Calendar.MONTH , 0 );
                break;
            case 2:
                c1.set ( Calendar.MONTH , 1 );
                break;
            case 3:
                c1.set ( Calendar.MONTH , 2 );
                break;
            case 4:
                c1.set ( Calendar.MONTH , 3 );
                break;
            case 5:
                c1.set ( Calendar.MONTH , 4 );
                break;
            case 6:
                c1.set ( Calendar.MONTH , 5 );
                break;
            case 7:
                c1.set ( Calendar.MONTH , 6 );
                break;
            case 8:
                c1.set ( Calendar.MONTH , 7 );
                break;
            case 9:
                c1.set ( Calendar.MONTH , 8 );
                break;
            case 10:
                c1.set ( Calendar.MONTH , 9 );
                break;
            case 11:
                c1.set ( Calendar.MONTH , 10 );
                break;
            case 12:
                c1.set ( Calendar.MONTH , 11 );
                break;
        }

        c1.set ( Calendar.YEAR , 2018 );
        c1.set ( Calendar.HOUR , 0 );
        c1.set ( Calendar.MINUTE , 0 );

        //   System.out.println ( ""+sdf2.format ( c1.getTime () ) );
        return sdf2.format ( c1.getTime () );
    }

    public String getDate_2 ( int date , int month ) {

        c1.set ( Calendar.DATE , date );

        switch ( month ) {
            case 1:
                c1.set ( Calendar.MONTH , 0 );
                break;
            case 2:
                c1.set ( Calendar.MONTH , 1 );
                break;
            case 3:
                c1.set ( Calendar.MONTH , 2 );
                break;
            case 4:
                c1.set ( Calendar.MONTH , 3 );
                break;
            case 5:
                c1.set ( Calendar.MONTH , 4 );
                break;
            case 6:
                c1.set ( Calendar.MONTH , 5 );
                break;
            case 7:
                c1.set ( Calendar.MONTH , 6 );
                break;
            case 8:
                c1.set ( Calendar.MONTH , 7 );
                break;
            case 9:
                c1.set ( Calendar.MONTH , 8 );
                break;
            case 10:
                c1.set ( Calendar.MONTH , 9 );
                break;
            case 11:
                c1.set ( Calendar.MONTH , 10 );
                break;
            case 12:
                c1.set ( Calendar.MONTH , 11 );
                break;
        }

        c1.set ( Calendar.YEAR , 2018 );

        return sdf3.format ( c1.getTime () );
    }

    public void loadComboBoxes () {

        String queryOne = "SELECT FG_ID, PART_NAME FROM finished_goods";
        String queryTwo = "SELECT EmployeePK, EMP_NAME FROM employee";
        String queryThree = "SELECT MCH_ID, MACHINE_NO FROM machine";
        String queryFour = "SELECT PROCESS_ID, PROCESS_NAME FROM PROCESS_MASTER";
        String queryFive = "SELECT RR_ID, RR_DESC FROM rejection_reasons";

        ResultSet rs = null;

        try {
            rs = DB_Operations.executeSingle ( queryOne );
            //  products = new ArrayList<HashMap<String, String>> ();
            products = new ArrayList<ProductDR> ();
            while ( rs.next () ) {
                prdr = new ProductDR ();
                prdr.FG_ID = Integer.parseInt ( rs.getString ( 1 ) );
                prdr.FG_PART_NO = rs.getString ( 2 );
                products.add ( prdr );
            }

            rs.close ();
        } catch ( Exception e ) {
            System.out.println ( " Error 1 " + e.getMessage () );
        }

        try {
            rs = DB_Operations.executeSingle ( queryTwo );
            // employees = new ArrayList<HashMap<String, String>> ();

            employees = new ArrayList<EmployeeDR> ();
            while ( rs.next () ) {
                empdr = new EmployeeDR ();

                empdr.EMP_ID = Integer.parseInt ( rs.getString ( 1 ) );
                empdr.EMP_NAME = rs.getString ( 2 );
                employees.add ( empdr );
            }

        } catch ( Exception e ) {
            System.out.println ( " Error 2 " + e.getMessage () );
        }

        try {
            rs = DB_Operations.executeSingle ( queryThree );
            machines = new ArrayList<MachineDR> ();

            while ( rs.next () ) {
                mcdr = new MachineDR ();

                mcdr.MC_ID = Integer.parseInt ( rs.getString ( 1 ) );
                mcdr.MC_NAME = rs.getString ( 2 );
                machines.add ( mcdr );
            }

        } catch ( Exception e ) {
            System.out.println ( " Error 2 " + e.getMessage () );
        }

        try {
            rs = DB_Operations.executeSingle ( queryFour );
            processes = new ArrayList<ProcessDR> ();

            while ( rs.next () ) {
                prcdr = new ProcessDR ();

                prcdr.PRC_ID = Integer.parseInt ( rs.getString ( 1 ) );
                prcdr.PRC_NAME = rs.getString ( 2 );
                processes.add ( prcdr );
            }

        } catch ( Exception e ) {
            System.out.println ( " Error 2 " + e.getMessage () );
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    // End of variables declaration//GEN-END:variables
}


/*
 *
 * switch(cell.getCellType ()){
 *
 * case 0: System.out.println ( "Number" ); break ; case 1: System.out.println (
 * "String" ); break ; case 2: System.out.println ( "Formula" ); break ; case 3:
 * System.out.println ( "Blank" ); break ; case 4: System.out.println (
 * "Boolean" ); break ; case 5: System.out.println ( "Error" ); break ;
 *
 * }
 *
 */
