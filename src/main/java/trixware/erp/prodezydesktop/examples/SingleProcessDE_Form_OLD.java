/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trixware.erp.prodezydesktop.examples;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import trixware.erp.prodezydesktop.Model.DailyDataEntryModel;
import trixware.erp.prodezydesktop.Model.EmployeeDR;
import trixware.erp.prodezydesktop.Model.MachineDR;
import trixware.erp.prodezydesktop.Model.Rejection_Reasons;
import trixware.erp.prodezydesktop.Model.StaticValues;

/**
 *
 * @author Rajesh
 */
public class SingleProcessDE_Form_OLD extends javax.swing.JPanel {

    DailyDataEntryModel data;
    
    String qin, qout, rej ;
    
    boolean formIncomplete = false ;
    
    /**
     * Creates new form SingleProcessDE_Form
     */
    public SingleProcessDE_Form_OLD () {
        
        initComponents ();
        
        //AutoCompletion.enable ( jComboBox1 );
      //  AutoCompletion.enable ( jComboBox2 );
      // AutoCompletion.enable ( jComboBox3 );
        
        data = new DailyDataEntryModel ();
        jLabel1.setVisible ( false);
        
        dateChooserCombo1.setText ( dateChooserCombo3.getText () );
        
        jTextField1.addKeyListener ( k );
        jTextField2.addKeyListener ( k );
        jTextField3.addKeyListener ( k );
        jTextField1.addFocusListener ( f2 );
        jTextField2.addFocusListener ( f2 );
        jTextField3.addFocusListener ( f3 );
        
        jTextField4.addKeyListener ( k );
        jTextField4.addFocusListener ( f );
        jTextField5.addFocusListener ( f4 );
        jTextField5.addKeyListener ( k );
        jTextField6.addFocusListener ( f );
        jTextField6.addKeyListener ( k );
        jTextField7.addFocusListener ( f4 );
        jTextField7.addKeyListener ( k );
        
        
        revalidate ();
        repaint ();
                
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jSpinner2 = new javax.swing.JSpinner();
        dateChooserCombo3 = new datechooser.beans.DateChooserCombo();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel1 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1200, 60));
        setLayout(null);

        jLabel2.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel2.setText("(PROCESS NAME)");
        add(jLabel2);
        jLabel2.setBounds(500, 10, 100, 30);

        jComboBox1.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox1FocusLost(evt);
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        add(jComboBox1);
        jComboBox1.setBounds(600, 10, 110, 30);

        jTextField1.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jTextField1.setText("0");
        jTextField1.setToolTipText("");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        add(jTextField1);
        jTextField1.setBounds(730, 10, 50, 30);

        jTextField2.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jTextField2.setText("0");
        jTextField2.setToolTipText("");
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });
        add(jTextField2);
        jTextField2.setBounds(790, 10, 50, 30);

        jTextField3.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jTextField3.setText("0");
        jTextField3.setToolTipText("");
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });
        add(jTextField3);
        jTextField3.setBounds(850, 10, 50, 30);

        jComboBox2.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jComboBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox2MouseClicked(evt);
            }
        });
        jComboBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox2KeyPressed(evt);
            }
        });
        add(jComboBox2);
        jComboBox2.setBounds(1090, 10, 130, 30);

        jTextField4.setText("0");
        add(jTextField4);
        jTextField4.setBounds(370, 10, 30, 30);

        jTextField5.setText("0");
        add(jTextField5);
        jTextField5.setBounds(400, 10, 30, 30);

        jSpinner1.setFont(new java.awt.Font("Leelawadee UI", 0, 11)); // NOI18N
        jSpinner1.setModel(new javax.swing.SpinnerListModel(new String[] {"AM", "PM"}));
        jSpinner1.setPreferredSize(new java.awt.Dimension(49, 25));
        add(jSpinner1);
        jSpinner1.setBounds(430, 10, 50, 30);

        jTextField6.setText("0");
        jTextField6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField6FocusLost(evt);
            }
        });
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField6KeyTyped(evt);
            }
        });
        add(jTextField6);
        jTextField6.setBounds(120, 10, 30, 30);

        jTextField7.setText("0");
        add(jTextField7);
        jTextField7.setBounds(150, 10, 30, 30);

        jSpinner2.setFont(new java.awt.Font("Leelawadee UI", 0, 11)); // NOI18N
        jSpinner2.setModel(new javax.swing.SpinnerListModel(new String[] {"AM", "PM"}));
        jSpinner2.setPreferredSize(new java.awt.Dimension(49, 25));
        add(jSpinner2);
        jSpinner2.setBounds(180, 10, 50, 30);

        dateChooserCombo3.setCalendarPreferredSize(new java.awt.Dimension(320, 220));
        add(dateChooserCombo3);
        dateChooserCombo3.setBounds(10, 10, 110, 30);

        dateChooserCombo1.setCalendarPreferredSize(new java.awt.Dimension(320, 220));
        try {
            dateChooserCombo1.setDefaultPeriods(dateChooserCombo3.getDefaultPeriods());
        } catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
            e1.printStackTrace();
        }
        dateChooserCombo1.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                dateChooserCombo1OnCommit(evt);
            }
        });
        add(dateChooserCombo1);
        dateChooserCombo1.setBounds(260, 10, 110, 30);

        jLabel1.setText("jLabel1");
        add(jLabel1);
        jLabel1.setBounds(570, 30, 30, 10);

        jComboBox3.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jComboBox3.setEnabled(false);
        add(jComboBox3);
        jComboBox3.setBounds(910, 10, 160, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void dateChooserCombo1OnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dateChooserCombo1OnCommit
        // TODO add your handling code here:
    }//GEN-LAST:event_dateChooserCombo1OnCommit

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        // TODO add your handling code here:
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        // TODO add your handling code here:
        char enter = evt.getKeyChar();
        if (!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyTyped
        // TODO add your handling code here:   
    }//GEN-LAST:event_jTextField6KeyTyped

    private void jTextField6FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField6FocusLost
        // TODO add your handling code here:        
    }//GEN-LAST:event_jTextField6FocusLost

    FocusListener f = new FocusListener () {
        @Override
        public void focusGained ( FocusEvent e ) {
//            throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
           // jcb.setText("");
           jcb.selectAll ();
        }

        @Override
        public void focusLost ( FocusEvent e ) {
        //    throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
            try{    
                int num  = Integer.parseInt( String.valueOf( jcb.getText().toString() ) );
                    if( num<1 || num>12 ){
                     jcb.setText("0");
                    //evt.consume ();
                }
            }catch(NumberFormatException ex1){
            jcb.setText("0");
            StaticValues.writer.writeExcel (SingleProcessDE_Form_OLD.class.getSimpleName () , SingleProcessDE_Form_OLD.class.getSimpleName () , ex1.getClass ().toString () , Thread.currentThread ().getStackTrace ()[ 1 ].getLineNumber () + "" , ex1.getMessage () , StaticValues.sdf2.format ( Calendar.getInstance ().getTime () ) ); 
            }
        }
    };
    
    FocusListener f4 = new FocusListener () {
        @Override
        public void focusGained ( FocusEvent e ) {
//            throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
         //   jcb.setText("");
         jcb.selectAll ();
        }

        @Override
        public void focusLost ( FocusEvent e ) {
        //    throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
            try{    
                int num  = Integer.parseInt( String.valueOf( jcb.getText().toString() ) );
                    if( num<1 || num>59 ){
                     jcb.setText("0");
                    //evt.consume ();
                }
            }catch(NumberFormatException ex1){
            jcb.setText("0");
            StaticValues.writer.writeExcel (SingleProcessDE_Form_OLD.class.getSimpleName () , SingleProcessDE_Form_OLD.class.getSimpleName () , ex1.getClass ().toString () , Thread.currentThread ().getStackTrace ()[ 1 ].getLineNumber () + "" , ex1.getMessage () , StaticValues.sdf2.format ( Calendar.getInstance ().getTime () ) ); 
            }
        }
    };
    
    
    FocusListener f2 = new FocusListener () {
        @Override
        public void focusGained ( FocusEvent e ) {
//            throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
           // jcb.setText("");
           jcb.selectAll ();
        }

        @Override
        public void focusLost ( FocusEvent e ) {
        //    throw new UnsupportedOperationException ( "Not supported yet." ); //To Search Google or type URL
//change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
            String x = jcb.getText().trim ();
            
            if(x.equalsIgnoreCase ( "")){
                x = "0";
            }
            
            try{    
                int num  = Integer.parseInt( String.valueOf( jcb.getText().toString() ) );
                    if( num<0  ){
                     jcb.setText(x);
                     
                    //evt.consume ();
                }
            }catch(NumberFormatException ex1){
                    jcb.setText(x);
                    StaticValues.writer.writeExcel (SingleProcessDE_Form_OLD.class.getSimpleName () , SingleProcessDE_Form_OLD.class.getSimpleName () , ex1.getClass ().toString () , Thread.currentThread ().getStackTrace ()[ 1 ].getLineNumber () + "" , ex1.getMessage () , StaticValues.sdf2.format ( Calendar.getInstance ().getTime () ) ); 
            }
        }
    };
    
    
    FocusListener f3 = new FocusListener () {
        @Override
        public void focusGained ( FocusEvent e ) {
//            throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
         //   jcb.setText("");
         jcb.selectAll ();
        }

        @Override
        public void focusLost ( FocusEvent e ) {
        //    throw new UnsupportedOperationException ( "Not supported yet." ); //To Search Google or type URL
//change body of generated methods, choose Tools | Templates.
            JTextField jcb = ( JTextField ) e.getSource ();    
            String x = jcb.getText().trim ();
            
            if(x.equalsIgnoreCase ( "")){
                x = "0";
            }
            
            try{    
                int num  = Integer.parseInt( String.valueOf( jcb.getText().toString() ) );
                    if( num<0  || num==0){
                        jcb.setText(x);
                        jComboBox3.setEnabled ( false);
                    }else{
                        jComboBox3.setEnabled ( true);
                    }
            }catch(NumberFormatException ex1){
                    jcb.setText(x);
                    StaticValues.writer.writeExcel (SingleProcessDE_Form_OLD.class.getSimpleName () , SingleProcessDE_Form_OLD.class.getSimpleName () , ex1.getClass ().toString () , Thread.currentThread ().getStackTrace ()[ 1 ].getLineNumber () + "" , ex1.getMessage () , StaticValues.sdf2.format ( Calendar.getInstance ().getTime () ) ); 
            }
            
            
        }
    };
    
    
    KeyListener k = new KeyListener () {
        @Override
        public void keyTyped ( KeyEvent e ) {
        //    throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
            char enter = e.getKeyChar();
            if (!(Character.isDigit(enter))) {
                e.consume();
            }
        }

        @Override
        public void keyPressed ( KeyEvent e ) {
        //    throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void keyReleased ( KeyEvent e ) {
        //    throw new UnsupportedOperationException ( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
        }
    };
    
    private void jComboBox1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1FocusLost

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
if(jComboBox1.getItemCount()==0){
JOptionPane.showMessageDialog(null, "<html><size='06'>First add MachineName from Machine  Master ");
}        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jComboBox2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox2KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2KeyPressed

    private void jComboBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox2MouseClicked
if(jComboBox2.getItemCount()==0){
JOptionPane.showMessageDialog(null, "<html><size='06'>First add EmployeeName from Employee  Master ");
}        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2MouseClicked
                   
//    String FromDate;
//    String FromTime;
//    String ToDate;
//    String ToTime;
//    String  Processname;
//    String ProcessID;
//    String QIn;
//    String Qout;
//    String Rejected;
//    ArrayList<EmployeeDR> Employee;
//    ArrayList<MachineDR> Machine;
    
    public String getRDate() {
        return sdf2.format(dateChooserCombo3.getSelectedDate ().getTime ())  +" 00:00:00";
    }

    public String getRTDate() {
        return sdf2.format(dateChooserCombo1.getSelectedDate ().getTime ())  +" 00:00:00";
    }

    public String getSFromTime() {
       
        
        return fromTime();
    }

    public String getSToTime() {
        
        return toTime();
    }
    
    public String getFromDate() {
        return dateChooserCombo3.getText ();
    }

    public String getFromTime() {
        return fromHr+":"+fromMin;
      
    }

    public String getToDate() {
         return dateChooserCombo1.getText ();
    }

    public String getToTime() {
        return toHr+":"+toMin;
    }

    public String getProcessname() {
        return jLabel2.getText();
    }

    public String getProcessID() {
        return jLabel1.getText();
    }

    public String getQIn() {
        return jTextField1.getText();
    }

    public String getQout() {
        return jTextField2.getText();
    }

    public String getRejected() {
        return jTextField3.getText();
    }

    public int getEmployee() {
        //return Employee;
        return jComboBox2.getSelectedIndex();
    }

    public int getMachine() {
        //return Machine;
        return jComboBox1.getSelectedIndex () ;
    }
    
    public int getRejectionReason() {
        //return Machine;
        return jComboBox3.getSelectedIndex () ;
    }

public void setFromDate ( String fromDate ) {
        data.setFromDate ( fromDate );
    }

    public void setFromTime ( String fromTime ) {
        //data.FromTime = fromTime;
        data.setFromTime( fromTime) ;
    }

    public void setToDate ( String toDate ) {
        //data.ToDate = toDate;
        data.setToDate ( toDate );
    }

    public void setToTime ( String toTime ) {
        //data.ToTime = toTime;
        data.setToTime ( toTime );
    }

    public void setProcessname ( String processname ) {
        //data.Processname = processname;
        data.setProcessname ( processname );
        jLabel2.setText ( processname );
    }

    public void setProcessID ( String processID ) {
       // data.ProcessID = processID;
       data.setProcessID ( processID );
        jLabel1.setText ( processID );
    }

    public void setQIn ( String QIn ) {
        //data.QIn = QIn;
        data.setQIn ( QIn );
        // jTextField1.setText ( QIn );
    }

    public void setQout ( String qout ) {
        //data.Qout = qout;
        data.setQout ( qout );
        //  jTextField2.setText (qout );
    }

    public void setRejected ( String rejected ) {
        //data.Rejected = rejected;
        data.setRejected ( rejected );
        // jTextField3.setText ( rejected );
    }

    public void setEmployee(ArrayList<EmployeeDR> employee) {
        data.Employee = employee;
        jComboBox2.removeAll ();
        for( int i=0; i<employee.size (); i++ ){
            jComboBox2.addItem ( employee.get ( i ).EMP_NAME );
        }
    }

    public void setMachine(ArrayList<MachineDR> machine) {
        data.Machine = machine;
        jComboBox1.removeAll ();
        for( int i=0; i<machine.size (); i++ ){
            jComboBox1.addItem ( machine.get ( i ).MC_NAME );
        }
        jComboBox1.revalidate ();
        jComboBox1.repaint ();
    }
    
    public void setRejectionReasons(ArrayList<Rejection_Reasons> rejectionReasons) {
        data.RejRsn = rejectionReasons;
        jComboBox3.removeAll ();
        for( int i=0; i<rejectionReasons.size (); i++ ){
            jComboBox3.addItem ( rejectionReasons.get ( i ).REJ_DESC );
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private datechooser.beans.DateChooserCombo dateChooserCombo3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables

    Calendar c1 = null, c2 = null;
    SimpleDateFormat sdf2 = new SimpleDateFormat ( "yyyy-MM-dd" );
    SimpleDateFormat sdf1 = new SimpleDateFormat ( "HH:mm:ss" );
    
    Calendar c3 = Calendar.getInstance ();
        Calendar c4 = Calendar.getInstance ();
        
        int fromHr, fromMin, toHr, toMin ;
        
        public String fromTime(){
            
             if(jSpinner2.getValue ().equals ( "PM")){
                        fromHr   = Integer.parseInt( jTextField6.getText ()) + 12;
                    //    c3.set ( Calendar.AM_PM, Calendar.PM);
                    }else{
                        fromHr   = Integer.parseInt( jTextField6.getText ()) ;
                     //   c3.set ( Calendar.AM_PM, Calendar.AM);
                    }
                    fromMin = Integer.parseInt(jTextField7.getText ());
                   
                    if(fromHr == 0 ){
                        if(fromMin==0){
                            formIncomplete = true ;
                           }else{
                            formIncomplete = false ;
                        }
                    }else{
                            formIncomplete = false ;
                    }
                    
                    
                    c3.set ( Calendar.HOUR , Integer.parseInt( jTextField6.getText ()));
                    c3.set ( Calendar.MINUTE , fromMin);
                    if(jSpinner2.getValue ().equals ( "PM")){
                        c3.set ( Calendar.AM_PM, Calendar.PM);
                    }else{
                        c3.set ( Calendar.AM_PM, Calendar.AM);
                    }
                    
                   return sdf1.format(c3.getTime()) ;
            
        }
        
        public String toTime(){
            
            
                     if(jSpinner1.getValue ().equals ( "PM")){
                        toHr   = Integer.parseInt( jTextField4.getText ()) + 12;
                    //    c4.set ( Calendar.AM_PM, Calendar.PM);
                    }else{
                        toHr   = Integer.parseInt( jTextField4.getText ()) ;
                    //    c4.set ( Calendar.AM_PM, Calendar.AM);
                    }
                    toMin = Integer.parseInt(jTextField5.getText ());
                    
                    if(toHr == 0 ){
                        if(toMin==0){
                            formIncomplete = true ;
                        }else{
                            formIncomplete = false ;
                        }
                    }else{
                            formIncomplete = false ;
                    }
                    
                    c4.set ( Calendar.HOUR , Integer.parseInt( jTextField4.getText ()));
                    c4.set ( Calendar.MINUTE , toMin);
                    if(jSpinner1.getValue ().equals ( "PM")){
                         c4.set ( Calendar.AM_PM, Calendar.PM);
                    }else{
                         c4.set ( Calendar.AM_PM, Calendar.AM);
                    }
            
                    
                    return sdf1.format(c4.getTime()); 
        }
        
    public String formatFromDate (    ) {

//        
//        c1 = Calendar.getInstance ();
//    
//        String[] dateIP = dateChooserCombo3.getText ().split ( " " );
//
//        String fromDate = null;
//
//        if ( dateIP[ 1 ].length () == 3 ) {
//            fromDate = dateIP[ 1 ].substring ( 0 , 2 ) + "-";
//            c1.set ( Calendar.DATE , Integer.parseInt ( dateIP[ 1 ].substring ( 0 , 2 ) ) );
//        } else if ( dateIP[ 1 ].length () == 2 ) {
//            fromDate = "0" + dateIP[ 1 ].substring ( 0 , 1 ) + "-";
//            c1.set ( Calendar.DATE , Integer.parseInt ( dateIP[ 1 ].substring ( 0 , 1 ) ) );
//        }
//
//        String mon = dateIP[ 0 ];
//
//        switch ( mon ) {
//
//            case "Jan":
//                fromDate = fromDate + "01-";
//                c1.set ( Calendar.MONTH , 0 );
//                break;
//            case "Feb":
//                fromDate = fromDate + "02-";
//                c1.set ( Calendar.MONTH , 1 );
//                break;
//            case "Mar":
//                fromDate = fromDate + "03-";
//                c1.set ( Calendar.MONTH , 2 );
//                break;
//            case "Apr":
//                fromDate = fromDate + "04-";
//                c1.set ( Calendar.MONTH , 3 );
//                break;
//            case "May":
//                fromDate = fromDate + "05-";
//                c1.set ( Calendar.MONTH , 4 );
//                break;
//            case "Jun":
//                fromDate = fromDate + "06-";
//                c1.set ( Calendar.MONTH , 5 );
//                break;
//            case "Jul":
//                fromDate = fromDate + "07-";
//                c1.set ( Calendar.MONTH , 6 );
//                break;
//            case "Aug":
//                fromDate = fromDate + "08-";
//                c1.set ( Calendar.MONTH , 7 );
//                break;
//            case "Sep":
//                fromDate = fromDate + "09-";
//                c1.set ( Calendar.MONTH , 8 );
//                break;
//            case "Oct":
//                fromDate = fromDate + "10-";
//                c1.set ( Calendar.MONTH , 9 );
//                break;
//            case "Nov":
//                fromDate = fromDate + "11-";
//                c1.set ( Calendar.MONTH , 10 );
//                break;
//            case "Dec":
//                fromDate = fromDate + "12-";
//                c1.set ( Calendar.MONTH , 11 );
//                break;
//
//        }
//
//        // fromDate = fromDate + dateIP[2];
//        c1.set ( Calendar.YEAR , Integer.parseInt ( dateIP[ 2 ] ) );
//        fromDate = sdf2.format ( c1.getTime () ) + " 00:00:00";
//
//        //   c1.setFirstDayOfWeek ( Calendar.SUNDAY);
//        //   System.out.println( "This is #"+  c1.get ( Calendar.WEEK_OF_MONTH) +" week in the month");
//        //  System.out.println( "This is #"+  (c1.get ( Calendar.MONTH) +1)+"  month in the year");
//        SimpleDateFormat sdf = new SimpleDateFormat ( "EEEE" );
//        SimpleDateFormat sdf1 = new SimpleDateFormat ( "MMM" );
//        SimpleDateFormat sdf2 = new SimpleDateFormat ( "yyyy" );
//        SimpleDateFormat sdf3 = new SimpleDateFormat ( "dd" );
//
    
        return sdf2.format ( dateChooserCombo3.getSelectedDate ().getTime () ) + " 00:00:00";
    }

    public String formatToDate ( ) {

//        c2 = Calendar.getInstance () ;
//         
//        String[] dateIP2 =   dateChooserCombo1.getText ().split ( " " );
//        String toDate = null;
//
//        if ( dateIP2[ 1 ].length () == 3 ) {
//            toDate = dateIP2[ 1 ].substring ( 0 , 2 ) + "-";
//            c2.set ( Calendar.DATE , Integer.parseInt ( dateIP2[ 1 ].substring ( 0 , 2 ) ) );
//        } else if ( dateIP2[ 1 ].length () == 2 ) {
//            toDate = "0" + dateIP2[ 1 ].substring ( 0 , 1 ) + "-";
//            c2.set ( Calendar.DATE , Integer.parseInt ( dateIP2[ 1 ].substring ( 0 , 1 ) ) );
//        }
//        String mon2 = dateIP2[ 0 ];
//
//        switch ( mon2 ) {
//
//            case "Jan":
//                toDate = toDate + "01-";
//                c2.set ( Calendar.MONTH , 0 );
//                break;
//            case "Feb":
//                toDate = toDate + "02-";
//                c2.set ( Calendar.MONTH , 1 );
//                break;
//            case "Mar":
//                toDate = toDate + "03-";
//                c2.set ( Calendar.MONTH , 2 );
//                break;
//            case "Apr":
//                toDate = toDate + "04-";
//                c2.set ( Calendar.MONTH , 3 );
//                break;
//            case "May":
//                toDate = toDate + "05-";
//                c2.set ( Calendar.MONTH , 4 );
//                break;
//            case "Jun":
//                toDate = toDate + "06-";
//                c2.set ( Calendar.MONTH , 5 );
//                break;
//            case "Jul":
//                toDate = toDate + "07-";
//                c2.set ( Calendar.MONTH , 6 );
//                break;
//            case "Aug":
//                toDate = toDate + "08-";
//                c2.set ( Calendar.MONTH , 7 );
//                break;
//            case "Sep":
//                toDate = toDate + "09-";
//                c2.set ( Calendar.MONTH , 8 );
//                break;
//            case "Oct":
//                toDate = toDate + "10-";
//                c2.set ( Calendar.MONTH , 9 );
//                break;
//            case "Nov":
//                toDate = toDate + "11-";
//                c2.set ( Calendar.MONTH , 10 );
//                break;
//            case "Dec":
//                toDate = toDate + "12-";
//                c2.set ( Calendar.MONTH , 11 );
//                break;
//
//        }
//
//        //toDate = toDate + dateIP2[2];
//        c2.set ( Calendar.YEAR , Integer.parseInt ( dateIP2[ 2 ] ) );
//        toDate = sdf2.format ( c2.getTime () ) + " 00:00:00";
//
//        c2.setFirstDayOfWeek ( Calendar.SUNDAY );
//        //   System.out.println( "This is #"+  c2.get ( Calendar.WEEK_OF_MONTH) +" week in the month");
//        //  System.out.println( "This is #"+  (c2.get ( Calendar.MONTH) +1)+" month in the year");

    //   return toDate;
            return sdf2.format( dateChooserCombo1.getSelectedDate ().getTime () ) + " 00:00:00"; 
    }
}
/*
 * Logic for 
 * 
 yourJTextField.getDocument().addDocumentListener(new DocumentListener() {
  public void changedUpdate(DocumentEvent e) {
    changed();
  }
  public void removeUpdate(DocumentEvent e) {
    changed();
  }
  public void insertUpdate(DocumentEvent e) {
    changed();
  }

  public void changed() {
     if (yourJTextField.getText().equals("")){
       loginButton.setEnabled(false);
     }
     else {
       loginButton.setEnabled(true);
    }

  }
});
 */