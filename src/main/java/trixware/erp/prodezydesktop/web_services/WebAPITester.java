/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trixware.erp.prodezydesktop.web_services;

import trixware.erp.prodezydesktop.Model.StaticValues;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Rajesh
 */
public class WebAPITester extends javax.swing.JPanel {

    private static URL myUrl = null;
    private static HttpURLConnection connection = null;
    private static final String REQUEST_METHOD = "POST";
    private static final int READ_TIMEOUT = 60000;
    private static final int CONNECTION_TIMEOUT = 60000;

    private static String result;
    private static String inputLine;

    public static String header = "";
    
    public static String apiNameANDparameters = "";
    
    public static byte[] body = null;
    
    /**
     * Creates new form WebAPITester
     */
    public WebAPITester () {
        initComponents ();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(912, 525));
        setLayout(null);

        jTextField1.setText("http://192.168.0.2:8081/projects/erp/public/auth/login?username=admin&password=YWRtaW4=&grant_type=password");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        add(jTextField1);
        jTextField1.setBounds(26, 51, 840, 30);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 140, 840, 320);
        add(jTextField2);
        jTextField2.setBounds(110, 100, 660, 30);

        jLabel2.setText("Params");
        add(jLabel2);
        jLabel2.setBounds(30, 100, 60, 16);

        jButton1.setText("Get Data");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(777, 95, 90, 32);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        apiNameANDparameters = jTextField1.getText();
        header               = jTextField2.getText () ;  
        
        
        String _result = executeWebCall2 () ;
        //jTextArea1.setText ( _result ) ;
        
        try{
            JSONObject result = new JSONObject( _result );
            jTextField2.setText (   result.getJSONObject("data").getString( "token" )  ) ;
        }catch( JSONException ex ){
            jTextArea1.setText ( _result ) ;
        }
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    static String _result ;
    
    public static String prepareWebCall( String param1, String param2, String param3 ){
        
        header = param2 ;
        apiNameANDparameters = param1;
        
        
        //t.start();
        _result =  executeWebCall ()  ;
            
        return _result;
    }
    public static String prepareWebCall2( String param1, String param2, String param3 , byte[] body1){
        
        header = param2 ;
        apiNameANDparameters = param1;
        
        body = body1 ;
        //t.start();
        _result =  executeWebCall ( )  ;
            
        return _result;
    }
     public static String prepareWebCall3( String param1, String param2, String param3 ){
        
        header = param2 ;
        apiNameANDparameters = param1;
        _result =  executeWebCall ( param1  , param3   )  ;
            
        return _result;
    }
    
     public static String executeWebCall ( ) {

       String url = "http://"+StaticValues.getApiURL ()+"/projects/erp/public/"+apiNameANDparameters;
//         System.err.println(apiNameANDparameters);
//         System.err.println(url);
        try {
            myUrl = new URL ( url );
        } catch ( MalformedURLException e1 ) {
            System.out.println ( ""+e1.getMessage () );
        }

        try {
            connection = ( HttpURLConnection ) myUrl.openConnection ();
            connection.setRequestMethod ( REQUEST_METHOD );
            connection.setReadTimeout ( READ_TIMEOUT );
            connection.setConnectTimeout ( CONNECTION_TIMEOUT );
            connection.setDoInput ( true );
            connection.setDoOutput ( true );
            connection.addRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            
            if( !apiNameANDparameters.contains ("auth/login" )){
                 connection.addRequestProperty ( "Authorization" , "encoded " + header ); 
            }
            connection.connect ();
            
            DataOutputStream request = new DataOutputStream ( connection.getOutputStream () );
          
            
            request.flush ();
            request.close ();
            connection.connect ();

            InputStreamReader streamReader = new InputStreamReader ( connection.getInputStream () );

            BufferedReader reader = new BufferedReader ( streamReader );
            StringBuilder stringBuilder = new StringBuilder ();

            while ( ( inputLine = reader.readLine () ) != null ) {
                stringBuilder.append ( inputLine );
            }

            reader.close ();
            streamReader.close ();

            result = stringBuilder.toString ();
            return result;

        } catch ( IOException e2 ) {
            return e2.getMessage ();
        }

    }

     //****************************generate code for graphs edited by mayur*************************************************************
    public String executeWebCall (String apiNameANDparameters ) {
        
       String url = "http://"+StaticValues.getApiURL ()+"/projects/erp/public/"+apiNameANDparameters;
//         System.err.println(apiNameANDparameters);
//         System.err.println(url);
         URL myUrl = null;
         HttpURLConnection connection = null;
        String result,inputLine; 
        try {
            myUrl = new URL ( url );
        } catch ( MalformedURLException e1 ) {
            System.out.println ( ""+e1.getMessage () );
        }

        try {
            connection = ( HttpURLConnection ) myUrl.openConnection();
            connection.setRequestMethod(REQUEST_METHOD);
            connection.setReadTimeout ( READ_TIMEOUT );
            connection.setConnectTimeout ( CONNECTION_TIMEOUT );
            connection.setDoInput ( true );
            connection.setDoOutput ( true );
            connection.addRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            
            if( !apiNameANDparameters.contains ("auth/login" )){
                 connection.addRequestProperty ( "Authorization" , "encoded " + header ); 
            }
            connection.connect ();
            
            DataOutputStream request = new DataOutputStream ( connection.getOutputStream () );
          
            
            request.flush ();
            request.close ();
            connection.connect ();

            InputStreamReader streamReader = new InputStreamReader ( connection.getInputStream () );

            BufferedReader reader = new BufferedReader ( streamReader );
            StringBuilder stringBuilder = new StringBuilder ();

            while ( ( inputLine = reader.readLine () ) != null ) {
                stringBuilder.append ( inputLine );
            }

            reader.close ();
            streamReader.close ();

            result = stringBuilder.toString ();
            return result;

        } catch ( IOException e2 ) {
            return e2.getMessage ();
        }

    }
    //****************************generate code for graphs edited by mayur************************************************************* 
     
     public static String executeWebCall ( String apiname, String params ) {

        String url = "http://"+StaticValues.getApiURL ()+"/projects/erp/public/"+apiname;

        try {
            myUrl = new URL ( url );
            System.out.println ( ""+url + params);
        } catch ( MalformedURLException e1 ) {
            System.out.println ( ""+e1.getMessage () );
        }

        try {
            connection = ( HttpURLConnection ) myUrl.openConnection ();
            connection.setRequestMethod ( REQUEST_METHOD );
            connection.setReadTimeout ( READ_TIMEOUT );
            connection.setConnectTimeout ( CONNECTION_TIMEOUT );
            connection.setDoInput ( true );
            connection.setDoOutput ( true );
            connection.addRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            
            if( !url.contains ("auth/login" )){
                 connection.addRequestProperty ( "Authorization" , "encoded " + header ); 
            }
                
            
            connection.connect ();
            
            DataOutputStream request = new DataOutputStream ( connection.getOutputStream () );
          
            request.write(   params.toString().getBytes()   );
            request.flush ();
            request.close ();
            connection.connect ();

            InputStreamReader streamReader = new InputStreamReader ( connection.getInputStream () );

            BufferedReader reader = new BufferedReader ( streamReader );
            StringBuilder stringBuilder = new StringBuilder ();

            while ( ( inputLine = reader.readLine () ) != null ) {
                stringBuilder.append ( inputLine );
            }

            reader.close ();
            streamReader.close ();

            result = stringBuilder.toString ();
            return result;

        } catch ( IOException e2 ) {
            return e2.getMessage ();
        }

    }
     
     public static String executeWebCall ( String urlTo, Map<String, String> parmas, String filepath, String filefield, String fileMimeType , byte[] data) {

         
         
       String url = "http://"+StaticValues.getApiURL ()+"/projects/erp/public/";

        HttpURLConnection connection = null;
        DataOutputStream outputStream = null;
        InputStream inputStream = null;

        String twoHyphens = "--";
        String boundary = "*****" + Long.toString(System.currentTimeMillis()) + "*****";
        String lineEnd = "\r\n";

        String result = "";

        int bytesRead, bytesAvailable, bufferSize;
        byte[] buffer;
        int maxBufferSize = 1 * 1024 * 1024;

        String[] q = filepath.split("/");
        int idx = q.length - 1;

        try {
            File file = new File(filepath);
            FileInputStream fileInputStream = new FileInputStream(file);

            myUrl = new URL(url);
            connection = (HttpURLConnection) myUrl.openConnection();

            connection.setDoInput(true);
            connection.setDoOutput(true);
            connection.setUseCaches(false);

            connection.setRequestMethod("POST");
            connection.setRequestProperty("Connection", "Keep-Alive");
            connection.setReadTimeout ( READ_TIMEOUT );
            connection.setConnectTimeout ( CONNECTION_TIMEOUT );
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
            connection.addRequestProperty ( "Authorization" , "encoded " + StaticValues.getHeader()  ); 

            outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes(twoHyphens + boundary + lineEnd);
            outputStream.writeBytes("Content-Disposition: form-data; name=\"" + filefield + "\"; filename=\"" + q[idx] + "\"" + lineEnd);
            outputStream.writeBytes("Content-Type: " + fileMimeType + lineEnd);
            outputStream.writeBytes("Content-Transfer-Encoding: binary" + lineEnd);

            outputStream.writeBytes(lineEnd);

            bytesAvailable = fileInputStream.available();
            bufferSize = Math.min(bytesAvailable, maxBufferSize);
            buffer = new byte[bufferSize];

            bytesRead = fileInputStream.read(buffer, 0, bufferSize);
            while (bytesRead > 0) {
                outputStream.write(buffer, 0, bufferSize);
                bytesAvailable = fileInputStream.available();
                bufferSize = Math.min(bytesAvailable, maxBufferSize);
                bytesRead = fileInputStream.read(buffer, 0, bufferSize);
            }

            outputStream.writeBytes(lineEnd);

            // Upload POST Data
            Iterator<String> keys = parmas.keySet().iterator();
            while (keys.hasNext()) {
                String key = keys.next();
                String value = parmas.get(key);

                outputStream.writeBytes(twoHyphens + boundary + lineEnd);
                outputStream.writeBytes("Content-Disposition: form-data; name=\"" + key + "\"" + lineEnd);
                outputStream.writeBytes("Content-Type: text/plain" + lineEnd);
                outputStream.writeBytes(lineEnd);
                outputStream.writeBytes(value);
                outputStream.writeBytes(lineEnd);
            }

       //     outputStream.writeBytes ( twoHyphens + boundary + twoHyphens + lineEnd );

       //     outputStream.flush ();
        //    outputStream.close ();
       //     connection.connect ();

            inputStream = connection.getInputStream();

            result = convertStreamToString(inputStream);

            fileInputStream.close();
            inputStream.close();
            outputStream.flush();
            outputStream.close();

            
        } catch (Exception e) {
            //logger.error(e);
           // throw new CustomException(e);
            System.out.println ( ""+e.getMessage() );
        }

        return result;
    }
     
    
        public static String convertStreamToString(InputStream is) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();

        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    } 
     
     
    public static String executeWebCall2 () {

       String url = apiNameANDparameters;

        try {
            myUrl = new URL ( url );
        } catch ( MalformedURLException e1 ) {
            System.out.println ( ""+e1.getMessage () );
        }

        try {
            connection = ( HttpURLConnection ) myUrl.openConnection ();
            connection.setRequestMethod ( REQUEST_METHOD );
            connection.setReadTimeout ( READ_TIMEOUT );
            connection.setConnectTimeout ( CONNECTION_TIMEOUT );
            connection.setDoInput ( true );
            connection.setDoOutput ( true );
            connection.addRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            //connection.addRequestProperty ( "User-Agent" , "Mozilla" );

            if( !apiNameANDparameters.contains ("auth/login" )){
                
                connection.addRequestProperty ( "Authorization" , "encoded " + header ); 
            }
            
            connection.connect ();

            DataOutputStream request = new DataOutputStream ( connection.getOutputStream () );

            request.flush ();
            request.close ();

            connection.connect ();

            InputStreamReader streamReader = new InputStreamReader ( connection.getInputStream () );

            BufferedReader reader = new BufferedReader ( streamReader );
            StringBuilder stringBuilder = new StringBuilder ();

            while ( ( inputLine = reader.readLine () ) != null ) {
                stringBuilder.append ( inputLine );
            }

            reader.close ();
            streamReader.close ();

            result = stringBuilder.toString ();

            return result;

        } catch ( IOException e2 ) {
            return e2.getMessage ();
        }

    }
	 public static String getInsertedId(String result) {
        String id = "";
        if (!result.contains("not found")) {
            HashMap<String, Object> map = new HashMap<String, Object>();
            JSONObject jObject = new JSONObject(result);
            Iterator<?> keys = jObject.keys();

            while (keys.hasNext()) {
                String key = (String) keys.next();
                Object value = jObject.get(key);
                map.put(key, value);
            }
            JSONObject st = (JSONObject) map.get("data");
            id = st.get("insert_id").toString();
        }
        return id;
    }

    
    
//     //****************************generate code for graphs edited by mayur*************************************************************
//    public String executeWebCall (String apiNameANDparameters ) {
//        
//       String url = "http://"+StaticValues.getApiURL ()+"/projects/erp/public/"+apiNameANDparameters;
////         System.err.println(apiNameANDparameters);
////         System.err.println(url);
//         URL myUrl = null;
//         HttpURLConnection connection = null;
//        String result,inputLine; 
//        try {
//            myUrl = new URL ( url );
//        } catch ( MalformedURLException e1 ) {
//            System.out.println ( ""+e1.getMessage () );
//        }
//
//        try {
//            connection = ( HttpURLConnection ) myUrl.openConnection();
//            connection.setRequestMethod(REQUEST_METHOD);
//            connection.setReadTimeout ( READ_TIMEOUT );
//            connection.setConnectTimeout ( CONNECTION_TIMEOUT );
//            connection.setDoInput ( true );
//            connection.setDoOutput ( true );
//            connection.addRequestProperty("Content-Type", "application/x-www-form-urlencoded");
//            
//            if( !apiNameANDparameters.contains ("auth/login" )){
//                 connection.addRequestProperty ( "Authorization" , "encoded " + header ); 
//            }
//            connection.connect ();
//            
//            DataOutputStream request = new DataOutputStream ( connection.getOutputStream () );
//          
//            
//            request.flush ();
//            request.close ();
//            connection.connect ();
//
//            InputStreamReader streamReader = new InputStreamReader ( connection.getInputStream () );
//
//            BufferedReader reader = new BufferedReader ( streamReader );
//            StringBuilder stringBuilder = new StringBuilder ();
//
//            while ( ( inputLine = reader.readLine () ) != null ) {
//                stringBuilder.append ( inputLine );
//            }
//
//            reader.close ();
//            streamReader.close ();
//
//            result = stringBuilder.toString ();
//            return result;
//
//        } catch ( IOException e2 ) {
//            return e2.getMessage ();
//        }
//
//    }
//    //****************************generate code for graphs edited by mayur************************************************************* 

     
    public static void uploadFile () {
     
     
     /*
     File inFile = new File("C:\\Users\\Rajesh\\Pictures\\Bhawana Documents\\Docs\\KVS _ Recruitment.pdf");
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(inFile);
			DefaultHttpClient httpclient = new DefaultHttpClient(new BasicHttpParams());
			
			// server back-end URL
			HttpPost httppost = new HttpPost("http://localhost:8080/FileUploaderRESTService-1/rest/upload");
			MultipartEntity entity = new MultipartEntity();
			// set the file input stream and file name as arguments
			entity.addPart("file", new InputStreamBody(fis, inFile.getName()));
			httppost.setEntity(entity);
			// execute the request
			HttpResponse response = httpclient.execute(httppost);
			
			int statusCode = response.getStatusLine().getStatusCode();
			HttpEntity responseEntity = response.getEntity();
			String responseString = EntityUtils.toString(responseEntity, "UTF-8");
			
			System.out.println("[" + statusCode + "] " + responseString);
			
		} catch (ClientProtocolException e) {
			System.err.println("Unable to make connection");
			e.printStackTrace();
		} catch (IOException e) {
			System.err.println("Unable to read file");
			e.printStackTrace();
		} finally {
			try {
				if (fis != null) fis.close();
			} catch (IOException e) {}
		}
     */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
