/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trixware.erp.prodezydesktop.newUI_Masters;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
import trixware.erp.prodezydesktop.Model.StaticValues;
import trixware.erp.prodezydesktop.web_services.WebAPITester;

/**
 *
 * @author WIN7
 */
public class QualityMaster extends javax.swing.JPanel {
    private Vector<Vector<Object>> data = null;
    private Vector<String> columnNames = null;
    private Vector<String> columnNames2 = null;
    /**
     * Creates new form QualityMaster
     */
    public QualityMaster() {
        initComponents();
        loadComboBox();
        jTextField2.addKeyListener(keyListner);
        jTextField3.addKeyListener(keyListner);
        jComboBox1.addActionListener(actionListener);

    }
    
    private void loadComboBox()
    {
        jTextField1.setText("");
        jTextField3.setText("");
        jTextField2.setText("");        
        jCheckBox1.setSelected(true);
        jComboBox1.removeAllItems();
        jComboBox1.addItem("Raw Material");
        jComboBox1.addItem("Process");
        jComboBox1.addItem("Part");
        loadTable();
    }
    private void loadTable()
    {
        int index=jComboBox1.getSelectedIndex();
        String addEmpAPICall=null;
        String result=null;
        switch (index) {
            case 0:
                 addEmpAPICall = "rmqty_master";
                 result = WebAPITester.prepareWebCall ( addEmpAPICall , StaticValues.getHeader () , "" );
                 getTable(result);
                break;
            case 1:
                 addEmpAPICall = "proc_qty_master";
                 result = WebAPITester.prepareWebCall ( addEmpAPICall , StaticValues.getHeader () , "" );
                 getTable(result);
                
                break;
            case 2:
                 addEmpAPICall = "partqty_masters";
                 result = WebAPITester.prepareWebCall ( addEmpAPICall , StaticValues.getHeader () , "" );
                 getTable(result);                
                break;
            default:
                break;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField3 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanel1.setLayout(null);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1);
        jComboBox1.setBounds(220, 50, 170, 40);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1);
        jTextField1.setBounds(220, 110, 170, 30);

        jLabel2.setText("Enter Name :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(70, 110, 130, 30);

        jCheckBox1.setText("Mandatory");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);
        jCheckBox1.setBounds(220, 150, 100, 30);
        jPanel1.add(jTextField3);
        jTextField3.setBounds(220, 190, 170, 30);
        jPanel1.add(jTextField2);
        jTextField2.setBounds(220, 240, 170, 30);

        jButton1.setText("Submit");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(140, 310, 120, 40);

        jLabel3.setText("Upper Control Limit :");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(70, 190, 130, 30);

        jLabel1.setText("Lower Control Limit :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(70, 240, 140, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 51));
        jLabel4.setText("*");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(210, 110, 12, 15);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("*");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(210, 190, 10, 15);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("*");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(210, 240, 7, 15);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(440, 40, 760, 400);

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    try{
        String qualityName=jTextField1.getText();
        Double qualityLLL=Double.parseDouble( jTextField2.getText());
        Double qualityULL=Double.parseDouble(jTextField3.getText());
        String qualityMasterType=jComboBox1.getSelectedItem().toString();
        if(!qualityName.equals("") && !qualityULL.equals("")&& !qualityLLL.equals(""))
        {
            addQualtyData(qualityMasterType, qualityName, qualityULL, qualityLLL, jCheckBox1.isSelected());
            loadComboBox();
        }else{
            JOptionPane.showMessageDialog ( null , "*Please filled all mandatory fields!" );
        }
    }catch(Exception e){}
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
  
    private void addQualtyData(String qtype,String qname,Double ull,Double lll,boolean mandetory)
    {
            try {
                int index=jComboBox1.getSelectedIndex();
                String addEmpAPICall=null;
                String result2=null;
                int mandatory=0;
                if(mandetory){
                    mandatory=1;
                }else{
                    mandatory=0;
                }
                switch(index)
                {
                    case 0:
                        addEmpAPICall = "rmqty_master_add?rm_param_name=" + URLEncoder.encode (qname , "UTF-8" ) + "&rm_p_mandatory=" +  mandatory + "&ULL=" + ull + "&LLL=" + lll;
                        result2 = WebAPITester.prepareWebCall ( addEmpAPICall , StaticValues.getHeader () , "" );
                        JOptionPane.showMessageDialog ( null , result2);
                        break;
                    case 1:
                        addEmpAPICall = "proc_qty_master_add?proc_param_name=" + URLEncoder.encode (qname , "UTF-8" ) + "&proc_p_mandatory=" +  mandatory + "&ULL=" + ull + "&LLL=" + lll;
                        result2 = WebAPITester.prepareWebCall ( addEmpAPICall , StaticValues.getHeader () , "" );
                        JOptionPane.showMessageDialog ( null , result2);
                        
                        break;
                    case 2:
                        addEmpAPICall = "partqty_master_add?part_param_name=" + URLEncoder.encode (qname , "UTF-8" ) + "&part_p_mandatory=" +  mandatory + "&ULL=" + ull + "&LLL=" + lll;
                        result2 = WebAPITester.prepareWebCall ( addEmpAPICall , StaticValues.getHeader () , "" );
                        JOptionPane.showMessageDialog ( null , result2);                            
                        break;
                }
            } catch ( UnsupportedEncodingException ex ) {
            }
    }
    ActionListener actionListener=new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            loadTable();
        }
    };
    KeyListener keyListner=new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
            char enter = e.getKeyChar ();
            String dot = Character.toString ( enter );
            
            if (  ! ( Character.isDigit ( enter ) ) &&  ! dot.equals ( "." ) ) {
                e.consume ();
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {
            
        }

        @Override
        public void keyReleased(KeyEvent e) {
            
        }
    };
    private void getTable(String api)
    {
        HashMap<String , Object> map = new HashMap<String , Object> ();
        JSONObject jObject = new JSONObject ( api );
        Iterator<?> keys = jObject.keys ();

        while ( keys.hasNext () ) {
            String key = ( String ) keys.next ();
            Object value = jObject.get ( key );
            map.put ( key , value );
        }

        
        JSONObject st = null;

            st = ( JSONObject ) map.get ( "data" );
            JSONArray records = st.getJSONArray ( "records" );
 
            data = new Vector<Vector<Object>> ();
            columnNames = new Vector<String> ();
            columnNames2 = new Vector<String> ();
            int index=jComboBox1.getSelectedIndex();
            switch(index)
            {
                case 0:
                columnNames.add ( "rm_param_name" );
                columnNames2.add ( "Name" );
                columnNames.add ( "rm_p_mandatory" );
                columnNames2.add ( "Mandetory" );
                columnNames.add ( "ULL" );                  
                columnNames2.add ( "Upper Control Limit" );
                columnNames.add ( "LLL" );                  
                columnNames2.add ( "Lower Control Limit" );
                break;
                case 1:
                columnNames.add ( "proc_param_name" );
                columnNames2.add ( "Name" );
                columnNames.add ( "proc_p_mandatory" );
                columnNames2.add ( "Mandetory" );
                columnNames.add ( "ULL" );                  
                columnNames2.add ( "Upper Control Limit" );
                columnNames.add ( "LLL" );                  
                columnNames2.add ( "Lower Control Limit" );
                break;
                case 2:
                columnNames.add ( "part_param_name" );
                columnNames2.add ( "Name" );
                columnNames.add ( "part_p_mandatory" );
                columnNames2.add ( "Mandetory" );
                columnNames.add ( "ULL" );                  
                columnNames2.add ( "Upper Control Limit" );
                columnNames.add ( "LLL" );                  
                columnNames2.add ( "Lower Control Limit" );
                break;
                default:
                    break;
            }
            for (int counter = 0 ; counter < records.length () ; counter ++ ) {
                Vector<Object> vector = new Vector<Object> ();

                String[] ab = new String[ columnNames.size () ];
                int batchId=0;
                for ( int columnIndex = 0 ; columnIndex < columnNames.size () ; columnIndex ++ ) {
                    
                    JSONObject emp = records.getJSONObject ( counter ); 
                    if(columnIndex==1)
                    {
                        int mandetory=Integer.parseInt(emp.get(columnNames.get(columnIndex)).toString());
                        if(mandetory==0)
                        {
                            vector.add("NO");
                        }else if(mandetory==1){
                            vector.add("YES");
                            
                        }
                    }else{
                        vector.add(emp.get(columnNames.get(columnIndex)));
                    }
                }
                data.add(vector);
            }
            jTable2.setModel(new DefaultTableModel(data, columnNames2));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
